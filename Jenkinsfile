#!groovy
// this file automatically generated by npm init @grpn

@Library('conveyor@latest-5')
@Library("conveyor-ci-util@r0.2.0") _

if (env.GITHUB_PULL_REQUEST == "false" && env.GITHUB_BRANCH != "master") return

def imgTag = "2020.06.26-14.37.49-b0b61ff"
def imgPfx = "docker-conveyor.groupondev.com/conveyor"

withCredentials([
  string(credentialsId: 'NLM_GH_TOKEN', variable: 'GH_TOKEN'),
  string(credentialsId: 'NLM_NPM_EMAIL', variable: 'NPM_EMAIL'),
  string(credentialsId: 'NLM_NPM_USERNAME', variable: 'NPM_USERNAME'),
  string(credentialsId: 'NLM_NPM_PASSWORD_BASE64', variable: 'NPM_PASSWORD_BASE64'),
]) {
  nodeFormatted("dind_2gb_2cpu") {
    stage("tests") {
      parallel(
        node10: {
          stage("node10 tests") {
            nodeFormatted("dind_2gb_2cpu") {
              checkout scm
              docker.image("${imgPfx}/alpine-node10-build:${imgTag}").inside {
                sh "npm ci"
                sh "GH_TOKEN=${GH_TOKEN} npm t"
              }
            }
          }
        },
        node12: {
          stage("node12 tests") {
            nodeFormatted("dind_2gb_2cpu") {
              checkout scm
              docker.image("${imgPfx}/alpine-node12-build:${imgTag}").inside {
                sh "npm ci"
                sh "GH_TOKEN=${GH_TOKEN} npm t"
              }
            }
          }
        },

        node14: {
          stage("node14 tests") {
            checkout scm
            docker.image("${imgPfx}/alpine-node14-build:${imgTag}").inside {
              sh "npm ci"
              sh "GH_TOKEN=${GH_TOKEN} npm t"
            }
          }
        }
      )
    }

    stage("publish") {
      if (env.GITHUB_BRANCH != "master") return
      def envForward = "GH_TOKEN=${GH_TOKEN} NPM_EMAIL=${NPM_EMAIL} NPM_USERNAME=${NPM_USERNAME} NPM_PASSWORD_BASE64=${NPM_PASSWORD_BASE64}"
      docker.image("${imgPfx}/alpine-node14-build:${imgTag}").inside {
        sh "${envForward} npx nlm release --commit"
      }
    }
  }
}
